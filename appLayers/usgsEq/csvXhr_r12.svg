<?xml version="1.0" encoding="UTF-8"?>
<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="-42.8202042942663, -49.9999999999999, 513.842451531196, 600" xmlns:go="http://purl.org/svgmap/profile"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" property="" data-controller="csvUI.html" >
<script>
	// Dynamic Csv POI Layer for SVGMap Sample for SVGMapLevel0.1 > r8
	// Programmed by Satoru Takagi
	// Copyright (C) 2014 by Satoru Takagi @ KDDI CORPORATION
	// 
	// License:
	//  This program is free software: you can redistribute it and/or modify
	//  it under the terms of the GNU General Public License version 3 as
	//  published by the Free Software Foundation.
	//
	//  This program is distributed in the hope that it will be useful,
	//  but WITHOUT ANY WARRANTY; without even the implied warranty of
	//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	//  GNU General Public License for more details.
	//
	//  You should have received a copy of the GNU General Public License
	//  along with this program.  If not, see (http://www.gnu.org/licenses/) .
	//
	// XHRで外部のcsvデータを読み取りPOIとして表示するwebApps　csvはタイリングを想定していない単純なもの。
	// SVGMapLv0.1_r8で使える。
	// ○CSVの形式：
	//   最初の行に属性名を記入 次の行からデータを入れる
	//   緯度と経度(WGS84)の桁が必須
	//   タイトルの桁が必須
	//   その他の桁は任意(用意できていない場合は適当な桁を指定しておくと良いでしょう・・・)
	// ○このファイル(svg)のコンテナでのリンクの張り方:
	//   csvXhr.svg#csvPath=refuge.csv&latCol=9&lngCol=10&titleCol=6
	//     ハッシュの後に、サーチパートと同じような書き方をします。
	//     csvPathとして読み込むcsvのパスを記述
	//     latColに緯度の桁(base 0)
	//     lngColに経度の桁
	//     titleColにタイトルの桁
	//     iconにアイコンの番号(0..5) - optional
	//
	// この実装の注意：
	// ＞(>)・＜(<)・＆(&)符号はエスケープしないと動かない
	// 
	// このコードの動作環境では、以下があらかじめ設定される
	// document:このドキュメント自身
	// this.CRS:このドキュメントのCRS
	// this.scale：このドキュメントの座標系での倍率
	// this.actualViewBox：このドキュメントの座標系でのviewBox
	// this.geoViewBox：地理座標におけるviewBox
	// this.location : 本来のdocument.locationに相当するもの
	// this.verIE : IEの場合、そのバージョンが設定。それ以外だと100
	// this.docPath : この文書のパス
	// onload:ロードされると呼ばれる
	// onzoom:ズームされると呼ばれる
	// onscroll:スクロールされると呼ばれる（ほかにズーム以外で画面更新時も）これらは描画の直前に呼ばれる
	// documentのzoomPanMap イベント　：　システム全体のロードが完了・描画完了状態で発行（onscrollなどより後に出る）
	//
	// 2013/04/20 : 1st ver. ( Dynamic SVGMap LayerのテンプレートApps)
	// 2014/06/26 : 1st ver. XHRによってCSVを読み込むレイヤーを開発
	// fork from rev3 : asynchronous >rev10 framework
	// 2017/02/17 Edge不具合対策 svgネームスペース文書操作全排除
	// 2019/06/10 : from rev3 アイコンをプロパティ値によって変化
	
	// Issues:
	
	var csv;
	
	var latCol , lngCol , titleCol=0, titleCol2=-1;
	var csvPath, docPath;
	var iconNumber = 0;
	var tokyoDatum = false;
	
	var varIconCol = -1;
	var varIconTh;
	
//	console.log("Build Function");
	
    var CR = String.fromCharCode(13);
    var LF = String.fromCharCode(10);
    
    var category ={
    "0" : "p0",
    "1" : "p1",
    "2" : "p2",
    "3" : "p3",
    "4" : "p4",
    "5" : "p5"
    }
    
    function getHashParams( hash ){
    	hash = hash.substring(1);
    	hash = hash.split("&");
		for ( var i = 0 ; i < hash.length ; i++ ){
			hash[i] = hash[i].split("=");
			if ( hash[i][1] ){
				hash[hash[i][0]] = hash[i][1];
			} else {
				hash[hash[i][0]] = true;
			}
		}
//    	console.log(hash);
    	return ( hash );
    }
    
	var canvasSize;
	
	function getCsv(){
		return ( csv );
	}
	
	function getSvgDir(){
		var ans = docPath;
		if ( ans.lastIndexOf("#") >0){
			ans = ans.substring(0,ans.lastIndexOf("#"));
		}
		if ( ans.lastIndexOf("?") >0){
			ans = ans.substring(0,ans.lastIndexOf("?"));
		}
		if ( ans.lastIndexOf("/") >0){
			ans = ans.substring(0,ans.lastIndexOf("/"));
		} else {
			ans ="";
		}
		return ( ans );
	}
	
	function onload(){
//		console.log("HelloOnloadFUNC! csvXhr:doc,this" , document,this);
//		console.log("HelloOnloadFUNC! csvXhr:" , this.location);
//		console.log("HelloOnloadFUNC! csvXhr:" , document.firstChild.getAttribute("viewBox") , this.verIE, " this.docPath=", this.location.pathname, " this.location=",this.location);
		var hParams = getHashParams(this.location.hash);
		docPath = this.location.pathname;
//		console.log( "csvPAth::::" , docPath.substring(0,docPath.lastIndexOf("/")));
		if ( hParams.csvPath ){
//			console.log("docPath:",docPath,"  hParams.csvPath:",hParams.csvPath);
//			csvPath = docPath.substring(0,docPath.lastIndexOf("/")+1) + hParams.csvPath;
//			csvPath = hParams.csvPath;
			if ( hParams.csvPath.startsWith("http")){
				csvPath = hParams.csvPath;
			} else {
				csvPath = getSvgDir() + "/"+ hParams.csvPath;
			}
			console.log("csvPath:",csvPath);
		}
		this.csvPath = csvPath;
		this.getCsv=getCsv;
		latCol = Number(hParams.latCol);
		lngCol = Number(hParams.lngCol);
		
		if ( hParams.datum && hParams.datum == "tokyo" ){
			tokyoDatum = true;
		}
		
		if ( hParams.titleCol ){
			if ( hParams.titleCol.indexOf("/")>=0){
				var tc = hParams.titleCol.split("/");
				titleCol = Number(tc[0]);
				titleCol2 = Number(tc[1]);
			} else {
				titleCol = Number(hParams.titleCol);
			}
		}
		
		if ( hParams.variableIcon ){
			// variableIconクエリ: カンマ区切り、カラム番号,Th(LL.L),Th(L.M),Th(M.H),Th(H.HH)
			var viParam = hParams.variableIcon;
			viParam=viParam.split(",");
			varIconCol = Number(viParam[0]);
			varIconTh = new Array();
//			viParam.length
			for ( var i = 0 ; i &lt; viParam.length -1 ; i++){
				varIconTh[i] = Number(viParam[i+1]);
			}
//			console.log("param:",viParam,"  col:",varIconCol,"  th:",varIconTh);
		}
		
		if ( hParams.icon ){
			iconNumber = Number(hParams.icon);
		}
		
		this.testcsv ="HELLO";
		this.TestFunc = TestFunc;
		this.initCsv = initCsv;
		
//		console.log("csvxhr: addEventListener zoomPanMap ");
		document.addEventListener("zoomPanMap",testZP);
		
		if ( csvPath ){
			loadCSV();
		}
		
		
	}
	
	function testZP(e){
//		console.log( "called testZP:",e);
	}
	
	function TestFunc(param){
		console.log("testFunc",param);
	}
	
	function initCsv(inputCsv, latC,lngC,titleC,icon){
		if(inputCsv){
			remoeAllPOIs();
			csv = inputCsv;
			latCol = latC;
			lngCol = lngC;
			titleCol = titleC;
			iconNumber = icon;
		}
		
		var eCsv="";
		
		csv = csv.replace(/¥"¥"/g, "&#034;");
		
		var prevPos = 0;
		var startPos = 0;
		while ( startPos >=0 ){
			startPos = csv.indexOf('"',prevPos);
			if ( startPos >=0 ){
				var endPos = csv.indexOf('"',startPos+1);
				eCsv += csv.substring(prevPos,startPos);
				var escStr = csv.substring(startPos+1,endPos);
				escStr = escStr.replace(/\r?\n/g,"");
				escStr = escStr.replace(/,/g, "&#044;");
				eCsv += escStr;
				prevPos = endPos + 1;
			} else {
				eCsv += csv.substring(prevPos);
			}
			
		}
		
		
		csv = eCsv;
		
//		console.log( "eCsv:",eCsv);
		
		csv = csv.split(LF);
//		console.log("initCsv:length",csv.length);
//		console.log("verIE:",verIE);
		document.firstChild.setAttribute("property", csv[0])
		for ( var i = 1 ; i < csv.length ; i++ ){
			var strTxt = csv[i].split(",");
//			console.log("strTxt",strTxt);
//			console.log("wgPos",strTxt[latCol],strTxt[lngCol]);
			
			if ( strTxt.length > 2 ){
				var wgPos;
				if ( tokyoDatum ){
					wgPos = toWGS( strTxt[2] * 1.0 , strTxt[1] * 1.0);
				} else {
					wgPos = { lat: Number( strTxt[latCol] ) , lng: Number( strTxt[lngCol]) };
				}
//				var wgPos = toWGS( strTxt[2] * 1.0 , strTxt[1] * 1.0);
				if ( wgPos && wgPos.lat && wgPos.lng){
					var title;
					if ( titleCol2 >= 0 ){
						title = strTxt[titleCol] + "/" + strTxt[titleCol2]
					} else {
						title = strTxt[titleCol];
					}
					if ( varIconCol != -1 ){
						iconNumber = getIconNumber(Number(strTxt[varIconCol]),varIconTh);
					}
					var addPOI = getPOI( wgPos.lat , wgPos.lng , iconNumber , title , strTxt); 
//					console.log(addPOI);
					document.getElementsByTagName("svg")[0].appendChild(addPOI);
				}
			}
				
			
//			console.log(i,strTxt);
		}
		
//		console.log("buildDoc svgroot:",document.getElementsByTagName("svg")[0]);
//		console.log("buildDocument:",document);
		canvasSize = getCanvasSize();
//		var currentTiles =  document.getElementsByTagName("image");
//		console.log("csv:",csv);
	}
	
	onzoom = function(){
//		console.log("csvhxr: call onzoom");
	}
	
	onscroll = onzoom;
	
	function getIconNumber( val, th ){
		var ans=0;
//		console.log( ans , val ,  th[ans],th);
		
		while ( val > th[ans] && ans <= th.length ){
			++ans;
		}
//		console.log( val , ans );
		return ( ans );
	}
	
	function loadCSV(){
		console.log("loadCSV csvPath:" , csvPath, " \ndocPath:",docPath);
		var httpObj = new XMLHttpRequest();
		if ( httpObj ) {
			httpObj.onreadystatechange = function(){ handleResult( this ) } ; // 非同期に変更(for >rev10) 2015.6.2
			httpObj.open("GET", csvPath , true );
//			httpObj.open("GET", csvPath , false );
			httpObj.send(null);
//			handleResult(httpObj); // 同期でとりあえず動作させる
		}
	}
	
	function handleResult( httpRes ){
//	console.log("handleResult");
	
		if (( httpRes.readyState == 4 ) ){
			if ( httpRes.status == 403 || httpRes.status == 404 || httpRes.status == 500 || httpRes.status == 503 ){
				console.log( "File get failed");
				return;
			}
//			console.log("xhrRes:",httpRes.responseText);
			csv = httpRes.responseText;
			initCsv();
			if ( refreshScreen ){
				refreshScreen();
			}
		}
	}
	
	
	function getPOI( latitude , longitude , icon , title , metadata){
//		console.log("call getPOI:");
		
		var tf = "ref(svg," + (longitude * 100) + "," + ( latitude * -100 ) + ")";
//		console.log("getPOI, tf:",tf);
		
		var cl;
//		console.log("verIE:",verIE);
		cl = document.createElement("use"); // Edgeで不具合発生＆すべてのケースでもはやdocumentはSVG文書ではなく単なるwell formed XML文書化したためSVGネームスペース宣言不要
/**
		if ( verIE < 100 ){
			cl = document.createElement("use");
		} else {
			cl = document.createElementNS("http://www.w3.org/2000/svg","use"); // Should be used NS ( for Firefox!!)
		}
**/
		cl.setAttribute("x" , 0);
		cl.setAttribute("y" , 0);
		cl.setAttribute("transform" , tf);
		cl.setAttribute("xlink:href" , "#"+(category[icon]));
		cl.setAttribute("xlink:title" , title);
		if ( metadata ){
			cl.setAttribute("content" , metadata);
		}
//		cl.setAttribute("opacity" , "0.5");
		return ( cl );
	}
	
	function toWGS(jlat , jlng){
		var glat = jlat - 0.00010695 * jlat + 0.000017464 * jlng + 0.0046017;
		var glng = jlng - 0.000046038 * jlat - 0.000083043 * jlng + 0.010040;
		return{
			lat: glat ,
			lng: glng
		}
	}
	
	function remoeAllPOIs(){
		var pois=document.getElementsByTagName("use");
		for ( var i = pois.length -1  ; i >=0 ; i-- ){
			(document.getElementsByTagName("svg")[0]).removeChild(pois[i]);
		}
	}
	
</script>

<globalCoordinateSystem srsName="http://purl.org/crs/84" transform="matrix(100,0,0,-100,0,0)" />
<defs>
 <g id="p0">
  <image xlink:href="mappinL0.png" preserveAspectRatio="none" x="-4" y="-16" width="12" height="18"/>
 </g>
 <g id="p1">
  <image xlink:href="mappinL1.png" preserveAspectRatio="none" x="-4" y="-12" width="9" height="14"/>
 </g>
 <g id="p2">
  <image xlink:href="mappinL2.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p3">
  <image xlink:href="mappinL3.png" preserveAspectRatio="none" x="-12" y="-37" width="28" height="41"/>
 </g>
 <g id="p4">
  <image xlink:href="mappinL4.png" preserveAspectRatio="none" x="-16" y="-50" width="38" height="54"/>
 </g>
</defs>

</svg>
