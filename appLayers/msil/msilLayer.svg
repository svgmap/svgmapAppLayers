<?xml version="1.0" encoding="UTF-8"?>
<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="-42.8202042942663, -49.9999999999999, 513.842451531196, 600" xmlns:go="http://purl.org/svgmap/profile"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" property="" data-controller="msilLayer.html" >
<script>
	// msil.go.jpからコンテンツを取得する
	//
	// Programmed by Satoru Takagi
	// 
	// License: (MPL v2)
	// This Source Code Form is subject to the terms of the Mozilla Public
	// License, v. 2.0. If a copy of the MPL was not distributed with this
	// file, You can obtain one at https://mozilla.org/MPL/2.0/.
	//
	// example:
	// https://www.msil.go.jp/arcgis/rest/services/Msil/Infrastructure/MapServer/export?token={token}&dpi=96&transparent=true&format=png8&layers=show:3&bbox=12355328.052494708,2084758.118497789,18661077.13790693,6433719.279810021&bboxSR=102100&imageSR=102100&size=1289,889&f=image
	
	// var cableLayer = "https://www.msil.go.jp/arcgis/rest/services/Msil/{layerName0}/MapServer/export?token={token}&dpi=96&transparent=true&format=png8&layers={layerName1}&bbox={mapBbox}&bboxSR=102100&imageSR=102100&size={imageSize}&f=image";
	
	var useImageProxy = false;
	var proxyPath = "https://www.msil.go.jp/arcgis/rest/services/Msil/";
	var cableLayer = "{layerName0}/MapServer/export?token={token}&dpi=96&transparent=true&format=png8&layers={layerName1}&bbox={mapBbox}&bboxSR=102100&imageSR=102100&size={imageSize}&f=image";

	var jsonSrc;
	var docPath, docDir;
	
	var layerName0= "Infrastructure";
	var layerName1= "show:3";
	
    function getHashParams( hash ){
    	hash = hash.substring(1);
    	hash = hash.split("&");
		for ( var i = 0 ; i < hash.length ; i++ ){
			hash[i] = hash[i].split("=");
			if ( hash[i][1] ){
				hash[hash[i][0]] = hash[i][1];
			} else {
				hash[hash[i][0]] = true;
			}
		}
//    	console.log(hash);
    	return ( hash );
    }
    
    
	function onload(){ 
		console.log("mlitRoad: HelloOnloadFUNC! jsonXhr:" , this.location ,  document.firstChild.getAttribute("property") , this.verIE);
		var hParams = getHashParams(this.location.hash);
		if ( hParams["layerName1"] ){
			layerName1 = hParams["layerName1"] ;
		}
		if ( hParams["layerName0"] ){
			layerName0 = hParams["layerName0"] ;
		}
		console.log("hParams:",hParams," layerName0,layerName1:",layerName0,layerName1);
		
		docPath = this.location.pathname;
		if ( docPath.indexOf("?") >= 0){
			docPath = docPath.substring(0,docPath.indexOf("?"));
		}
		if ( docPath.indexOf("#") >= 0 ){
			docPath = docPath.substring(0,docPath.indexOf("#"));
		}
		
		docDir = docPath.substring(0,docPath.lastIndexOf("/")+1);
		
		canvasSize = getCanvasSize();
		
		console.log("docPath:",docPath, "  docDir:",docDir,"  canvasSize:",canvasSize,"  geoViewBox:",geoViewBox);
		
		loadJSONpost( "https://www.msil.go.jp/msilwebtoken/api/token/new" , handleResult);
		
		
	}
	
	onzoom = function(){
		console.log("call onzoom");
		canvasSize = getCanvasSize();
		geoVB = geoViewBox;
		console.log("msil mercator  geoViewBox:",geoViewBox," layerName0,layerName1:",layerName0,layerName1 );
		pMin = latLng2XY(geoVB.y,geoVB.x);
		pMax = latLng2XY(geoVB.y+geoVB.height,geoVB.x+geoVB.width)
		// console.log( "  webMercatorXY1,2:",pMin,pMax);
		
		var mAspect = (pMax.y - pMin.y)/(pMax.x - pMin.x);
		// console.log("mAspect:",mAspect,"  gAspect:",(canvasSize.height/canvasSize.width))
		
		var reqH = canvasSize.height;
		var reqW = Math.floor(canvasSize.height / mAspect);
		// console.log("px:",reqW,reqH);
		
		var reqBbox = pMin.x + "," + pMin.y + "," + pMax.x + "," + pMax.y;
		var reqIsize = reqW + "," + reqH;
		
		var reqMsg = cableLayer.replace("{imageSize}",reqIsize);
		reqMsg = reqMsg.replace("{mapBbox}",reqBbox);
		reqMsg = reqMsg.replace("{layerName0}",layerName0);
		reqMsg = reqMsg.replace("{layerName1}",layerName1);
		// console.log("reqMsg:",reqMsg);
		if ( token){
			var oimg = document.getElementById("mapContent");
			oimg.parentNode.removeChild(oimg);
			
			var img = document.createElement("image");
			img.setAttribute("id","mapContent");
			
			reqMsg = reqMsg.replace("{token}",token);
			
			if ( useImageProxy ){
				reqMsg = proxyPath + encodeURIComponent(reqMsg);
			} else {
				reqMsg = proxyPath + reqMsg;
			}
			var mvb = getMercatorVB(geoVB);
			console.log("reqMsg:",reqMsg," token:",token);
			img.setAttribute("xlink:href",reqMsg);
			img.setAttribute("x",mvb.x);
			img.setAttribute("y",mvb.y);
			img.setAttribute("width",mvb.width);
			img.setAttribute("height",mvb.height);
			document.getElementsByTagName("svg")[0].appendChild(img);
			// console.log("imageElem:",img);
			//img.setAttribute("data-mercator-tile" , "true");
		}
	}
	
	onscroll = onzoom;
	
	function loadJSON(jsonSrc,cbFunc){
//	console.log("loadJSON : SRC: ", jsonSrc);
		var httpObj = new XMLHttpRequest();
		if ( httpObj ) {
			httpObj.onreadystatechange = function(){ cbFunc( this ) } ;
			httpObj.open("GET", jsonSrc , true );
			httpObj.send(null);
		}
	}
	
	function loadJSONpost(jsonSrc,cbFunc){
		console.log("loadJSONpost : SRC: ", jsonSrc);
		var httpObj = new XMLHttpRequest();
		if ( httpObj ) {
			httpObj.onreadystatechange = function(){ cbFunc( this ) } ;
			httpObj.open("POST", getCORSURL(jsonSrc) , true );
			httpObj.setRequestHeader('content-type', 'text/plain');
//			httpObj.setRequestHeader('content-length', '0');
			httpObj.send("");
		}
	}
	
	var token = "";
	
	function handleResult( httpRes ){
//	console.log("handleResult");
		if (( httpRes.readyState == 4 ) ){
			if ( httpRes.status == 403 || httpRes.status == 404 || httpRes.status == 500 || httpRes.status == 503 ){
				console.log( "loadJSON : File get failed : stat : ", httpRes.status);
				return;
			}
//			console.log("xhrRes: resonseText",httpRes.responseText);
			var jst = httpRes.responseText;
			jst = unescape(jst);
			json = JSON.parse(jst);
			console.log("Json:",json);
			token = json.token;
			onzoom();
			refreshScreen();
		}
	}
	
	
	
	function mlitKinkiRoadJson2svg( json ){
		console.log("called mlitKinkiRoadJson2svg",json);
		
		var schema = {};
		var schemaStr="";
		
		var lat, lon;
		var setProp;
		
		for ( var i = 0 ; i < json.body.length ; i++ ){
			var poi = json.body[i];
			var k=-1;
			var commonProps = [];
			for (var propName in poi){
				switch ( propName ){
				case "lat":
					lat = Number(poi.lat);
					setProp = false;
					break;
				case "lon":
					lon = Number(poi.lon);
					setProp = false;
					break;
				default:
					propValue = poi[propName];
					setProp = true;
					++k;
					break;
				}
				
				if ( i == 0 && setProp ){
					if ( k == 0 ){
						schemaStr = propName;
					} else {
						schemaStr +=","+propName;
					}
					schema[propName]=k;
				}
				
				
				if ( propName in schema ){
					commonProps[ schema[propName] ] = propValue;
//						console.log( " set:",propName,":",propValue);
				} else {
//						console.log( "NOT set:",propName,":",propValue);
				}
			}
			
			var propStr ="";
			for ( var j = 0 ; j &lt;  commonProps.length ; j++ ){
				if ( j == 0 ){
					propStr = commonProps[j];
				} else {
					propStr += "," + commonProps[j];
				}
			}
			
			var addPOI = getPOI( lat , lon , iconNumber , commonProps[schema[titlePropName]], propStr); 
			document.getElementsByTagName("svg")[0].appendChild(addPOI);
			
		}
		
		document.firstChild.setAttribute("property", schemaStr);
		
	}
	
	function getPOI( latitude , longitude , icon , title , metadata){
//		console.log("call getPOI:");
		
		var tf = "ref(svg," + (longitude * 100) + "," + ( latitude * -100 ) + ")";
//		console.log("getPOI, tf:",tf);
		
		var cl;
		cl = document.createElement("use"); // Edgeで不具合発生＆すべてのケースでもはやdocumentはSVG文書ではなく単なるwell formed XML文書化したためSVGネームスペース宣言不要
		cl.setAttribute("x" , 0);
		cl.setAttribute("y" , 0);
		cl.setAttribute("transform" , tf);
		cl.setAttribute("xlink:href" , "#"+(category[icon]));
		cl.setAttribute("xlink:title" , title);
		if ( metadata ){
			cl.setAttribute("content" , metadata);
		}
//		cl.setAttribute("opacity" , "0.5");
		return ( cl );
	}
	
	function remoeAllPOIs(){
		var pois=document.getElementsByTagName("use");
		for ( var i = pois.length -1  ; i >=0 ; i-- ){
			(document.getElementsByTagName("svg")[0]).removeChild(pois[i]);
		}
	}
	
	
	function latLng2XY( Latitude , Longitude){
		var a = 6378137;
		Latitude =Latitude  * Math.PI / 180.0;
		Longitude =Longitude  * Math.PI / 180.0;
		var Mercator_x = a * Longitude;
		var Mercator_y = a * Math.log(Math.tan(Math.PI / 4 + Latitude / 2))
			return {
				x: Mercator_x,
				y: Mercator_y
			}
	}
		


function getMercatorVB(geoVB){ // geoVB.x,y,width,height
	var m = mercator();
	var p0 =m.transform({x:geoVB.x,y:geoVB.y});
	var p1 =m.transform({x:geoVB.x+geoVB.width,y:geoVB.y+geoVB.height});
//	console.log(p0,p1);
	var x = Math.min(p0.x,p1.x);
	var y = Math.min(p0.y,p1.y);
	var width = Math.abs(p0.x-p1.x);
	var height = Math.abs(p0.y-p1.y);
	return {x,y,width,height};
}

function mercator() { // この定義が、svgmapjs内の組み込みmercator
	function latLng2MercatorXY(lat, lng) {
		// 正規化メルカトル座標と緯度経度との間の変換関数 (下の関数とセット)
		// lng:-180..180 -> x:0..1,   lat: 85.051128..-85.051128 -> y:0..1 グラフィックスのY反転座標になってる
		var size = 1;
		var sinLat = Math.sin((lat * Math.PI) / 180.0);
		var pixelX = ((lng + 180.0) / 360.0) * size;
		var pixelY =
			(0.5 - Math.log((1 + sinLat) / (1.0 - sinLat)) / (4 * Math.PI)) *
			size;
		//	console.log("latLng2MercatorXY: lat,lng:",lat,lng,"  mercatorXY:",pixelX,pixelY);
		return {
			x: pixelX,
			y: pixelY,
		};
	}

	function MercatorXY2latLng(px, py) {
		// px,py: 上のx,y　正規化メルカトル座標
		var size = 1;
		var x = px / size - 0.5;
		var y = 0.5 - py / size;
		var lat = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;
		var lng = 360 * x;
		//	console.log("MercatorXY2latLng: mercatorXY:",px , py,"  lat,lng:",lat,lng  );
		return {
			lat: lat,
			lng: lng,
		};
	}

	return {
		transform: function (inp) {
			return latLng2MercatorXY(inp.y, inp.x);
		},
		inverse: function (inp) {
			var latlng = MercatorXY2latLng(inp.x, inp.y);
			return {
				x: latlng.lng,
				y: latlng.lat,
			};
		},
		scale: 1 / 360,
		mercator: true, // 2021/8/10 メルカトルタイルのための特殊処理を起動するキーパラメータ
	};
}

</script>

<globalCoordinateSystem srsName="http://purl.org/crs/84" transform="mercator" />
<defs>
 <g id="p0" >
  <image xlink:href="kouji_24_24.png" preserveAspectRatio="none" x="-11" y="-23" width="24" height="24"/>
 </g>
 <g id="p1" >
  <image xlink:href="kisei_24_24.png" preserveAspectRatio="none" x="-11" y="-23" width="24" height="24"/>
 </g>
 <g id="p2" >
  <image xlink:href="mappin2.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p3" >
  <image xlink:href="mappin3.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p4" >
  <image xlink:href="mappin4.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
 <g id="p5" >
  <image xlink:href="mappin5.png" preserveAspectRatio="none" x="-8" y="-25" width="19" height="27"/>
 </g>
</defs>

<image id="mapContent" xlink:href="" x="-30000" y="-30000" width="60000" height="60000"/>
</svg>
